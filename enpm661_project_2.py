# -*- coding: utf-8 -*-
"""ENPM661-PROJECT-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gGwy8TeUpw66YE_moKvLIxVGiarn5FzR
"""

import numpy as np
import matplotlib.pyplot as plt
import time
from queue import PriorityQueue

class Vertex:
    def __init__(self, x_coord, y_coord, cost, parent_vertex):
        self.x_coord = x_coord
        self.y_coord = y_coord
        self.cost = cost
        self.parent_vertex = parent_vertex

    def __lt__(self, other):
        return self.cost < other.cost

def move_up(x, y, cost):
    return x, y + 1, cost + 1

def move_down(x, y, cost):
    return x, y - 1, cost + 1

def move_left(x, y, cost):
    return x - 1, y, cost + 1

def move_right(x, y, cost):
    return x + 1, y, cost + 1

def move_upright(x, y, cost):
    return x + 1, y + 1, cost + np.sqrt(2)

def move_downright(x, y, cost):
    return x + 1, y - 1, cost + np.sqrt(2)

def move_upleft(x, y, cost):
    return x - 1, y + 1, cost + np.sqrt(2)

def move_downleft(x, y, cost):
    return x - 1, y - 1, cost + np.sqrt(2)


def move_vertex(move, x_coord, y_coord, cost):
    if move == 'Up':
        return move_up(x_coord, y_coord, cost)
    elif move == 'UpRight':
        return move_upright(x_coord, y_coord, cost)
    elif move == 'Right':
        return move_right(x_coord, y_coord, cost)
    elif move == 'DownRight':
        return move_downright(x_coord, y_coord, cost)
    elif move == 'Down':
        return move_down(x_coord, y_coord, cost)
    elif move == 'DownLeft':
        return move_downleft(x_coord, y_coord, cost)
    elif move == 'Left':
        return move_left(x_coord, y_coord, cost)
    elif move == 'UpLeft':
        return move_upleft(x_coord, y_coord, cost)
    else:
        return None